{"ast":null,"code":"var _jsxFileName = \"C:\\\\demo\\\\hunburger\\\\src\\\\Components\\\\Burger\\\\OrderSummary\\\\BuildControls.js\";\nimport React from 'react';\nimport classes from './BuildControls.module.css';\nimport BuildControl from '../BuildControls/BuildControl';\nimport Modal from '../../UI/Model/Msgbox';\nconst controls = [//数组\n{\n  label: 'Salad',\n  type: 'salad'\n}, {\n  label: 'Bacon',\n  type: 'bacon'\n}, {\n  label: 'Cheese',\n  type: 'cheese'\n}, {\n  label: 'Meat',\n  type: 'meat'\n}];\n\nconst buildControls = props => {\n  this.state = {\n    visible: false\n  }; // const orderstate=()=>{ \n  // this.orderstate=true;\n  //   }\n  //Array.map() 方法返回一个新数组，\n  //数组中的元素为原始数组元素调用函数处理后的值，同时不会改变原来的数组。\n\n  showModal = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    console.log('onClose');\n  };\n\n  onConfirm = () => {\n    console.log('onConfirm');\n  };\n\n  const ingredientcontrol = control => {\n    return React.createElement(BuildControl, {\n      key: control.label,\n      label: control.label //bind()方法主要就是将函数绑定到某个对象，bind()会创建一个函数，\n      //函数体内的this对象的值会被绑定到传入bind()第一个参数的值，\n      //例如，f.bind(obj)，实际上可以理解为obj.f()，这时，f函数体内的this自然指向的是obj\n      ,\n      add: props.IngredientAdded.bind(this, control.type) //IngredientAdded是buildControls定义的\n      ,\n      remove: props.RemoveIngredient.bind(this, control.type),\n      disabled: props.disabled[control.type],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.BuildControls,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    visible: visible,\n    title: \"\\u8FD9\\u662F\\u81EA\\u5B9A\\u4E49\\u7684title\",\n    onClose: this.onClose,\n    onConfirm: this.onConfirm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"\\u8FD9\\u662F\\u81EA\\u5B9A\\u4E49\\u7684content\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Current Price: \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"\\xA3\", props.totalPrice.toFixed(2)), \" \"), controls.map(ingredientcontrol), React.createElement(\"button\", {\n    onClick: () => this.showModal() //ordersum 点击计算总价按钮之后的账单\n    ,\n    className: classes.OrderButton,\n    disabled: !props.purchaseable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"ORDER NOW\"));\n};\n\nexport default buildControls;","map":{"version":3,"sources":["C:/demo/hunburger/src/Components/Burger/OrderSummary/BuildControls.js"],"names":["React","classes","BuildControl","Modal","controls","label","type","buildControls","props","state","visible","showModal","setState","onClose","console","log","onConfirm","ingredientcontrol","control","IngredientAdded","bind","RemoveIngredient","disabled","BuildControls","totalPrice","toFixed","map","OrderButton","purchaseable"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,MAAMC,QAAQ,GAAG,CAAC;AACd;AAACC,EAAAA,KAAK,EAAG,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CADa,EAEb;AAACD,EAAAA,KAAK,EAAG,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CAFa,EAGb;AAACD,EAAAA,KAAK,EAAG,QAAT;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAHa,EAIb;AAACD,EAAAA,KAAK,EAAG,MAAT;AAAiBC,EAAAA,IAAI,EAAE;AAAvB,CAJa,CAAjB;;AAOA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,OAAKC,KAAL,GAAa;AACXC,IAAAA,OAAO,EAAE;AADE,GAAb,CAD+B,CAI7B;AACA;AACA;AACE;AACA;;AACAC,EAAAA,SAAS,GAAG,MAAM;AAChB,SAAKC,QAAL,CAAc;AACVF,MAAAA,OAAO,EAAE;AADC,KAAd;AAGP,GAJK;;AAKNG,EAAAA,OAAO,GAAG,MAAM;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,GAFD;;AAGAC,EAAAA,SAAS,GAAG,MAAM;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,GAFD;;AAGI,QAAME,iBAAiB,GAAEC,OAAD,IAAa;AACjC,WAAO,oBAAC,YAAD;AACN,MAAA,GAAG,EAAEA,OAAO,CAACb,KADP;AAEN,MAAA,KAAK,EAAEa,OAAO,CAACb,KAFT,CAGN;AACA;AACA;AALM;AAMN,MAAA,GAAG,EAAEG,KAAK,CAACW,eAAN,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiCF,OAAO,CAACZ,IAAzC,CANC,CAM8C;AAN9C;AAON,MAAA,MAAM,EAAEE,KAAK,CAACa,gBAAN,CAAuBD,IAAvB,CAA4B,IAA5B,EAAiCF,OAAO,CAACZ,IAAzC,CAPF;AAQN,MAAA,QAAQ,EAAEE,KAAK,CAACc,QAAN,CAAeJ,OAAO,CAACZ,IAAvB,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAUH,GAXD;;AAYD,SAEA;AAAK,IAAA,SAAS,EAAEL,OAAO,CAACsB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACD,IAAA,OAAO,EAAEb,OADR;AAED,IAAA,KAAK,EAAC,2CAFL;AAGD,IAAA,OAAO,EAAE,KAAKG,OAHb;AAID,IAAA,SAAS,EAAE,KAAKG,SAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,EASK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAUR,KAAK,CAACgB,UAAN,CAAiBC,OAAjB,CAAyB,CAAzB,CAAV,CAAlB,MATL,EAWMrB,QAAQ,CAACsB,GAAT,CAAaT,iBAAb,CAXN,EAYK;AAAS,IAAA,OAAO,EAAE,MAAM,KAAKN,SAAL,EAAxB,CAA0C;AAA1C;AACC,IAAA,SAAS,EAAEV,OAAO,CAAC0B,WADpB;AAEC,IAAA,QAAQ,EAAE,CAACnB,KAAK,CAACoB,YAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAZL,CAFA;AAkBE,CAlDL;;AAoDA,eAAerB,aAAf","sourcesContent":["import React from 'react'\nimport classes from './BuildControls.module.css'\nimport BuildControl from '../BuildControls/BuildControl';\nimport Modal from '../../UI/Model/Msgbox';\nconst controls = [//数组\n    {label : 'Salad', type: 'salad'},\n    {label : 'Bacon', type: 'bacon'},\n    {label : 'Cheese', type: 'cheese'},\n    {label : 'Meat', type: 'meat'},\n]\n\nconst buildControls = (props) => {\n  this.state = {\n    visible: false,\n  }\n    // const orderstate=()=>{ \n    // this.orderstate=true;\n    //   }\n      //Array.map() 方法返回一个新数组，\n      //数组中的元素为原始数组元素调用函数处理后的值，同时不会改变原来的数组。\n      showModal = () => {\n        this.setState({\n            visible: true,\n        });\n}\nonClose = () => {\n    console.log('onClose');\n}\nonConfirm = () => {\n    console.log('onConfirm');\n}\n    const ingredientcontrol=(control) => {\n        return <BuildControl\n         key={control.label} \n         label={control.label} \n         //bind()方法主要就是将函数绑定到某个对象，bind()会创建一个函数，\n         //函数体内的this对象的值会被绑定到传入bind()第一个参数的值，\n         //例如，f.bind(obj)，实际上可以理解为obj.f()，这时，f函数体内的this自然指向的是obj\n         add={props.IngredientAdded.bind(this, control.type)}//IngredientAdded是buildControls定义的\n         remove={props.RemoveIngredient.bind(this,control.type)}\n         disabled={props.disabled[control.type]}\n         />\n    }\n   return ( \n    \n   <div className={classes.BuildControls}>\n     <Modal\n    visible={visible}\n    title='这是自定义的title'\n    onClose={this.onClose}\n    onConfirm={this.onConfirm}\n    >\n      这是自定义的content\n            </Modal>\n        <p>Current Price: <strong>£{props.totalPrice.toFixed(2)}</strong> </p>\n        {/* toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。  */}\n        {controls.map(ingredientcontrol)} \n        <button  onClick={() => this.showModal()} //ordersum 点击计算总价按钮之后的账单\n         className={classes.OrderButton}\n         disabled={!props.purchaseable}>ORDER NOW</button>\n    </div>\n   )};\n\nexport default buildControls;"]},"metadata":{},"sourceType":"module"}