{"ast":null,"code":"var _jsxFileName = \"C:\\\\demo\\\\hunburger\\\\src\\\\Components\\\\Burger\\\\OrderSummary\\\\BuildControls.js\";\nimport React, { Component } from 'react';\nimport classes from './BuildControls.module.css';\nimport BuildControl from '../BuildControls/BuildControl'; //Array.map() 方法返回一个新数组，\n//数组中的元素为原始数组元素调用函数处理后的值，同时不会改变原来的数组。\n//bind()方法主要就是将函数绑定到某个对象，bind()会创建一个函数，\n//函数体内的this对象的值会被绑定到传入bind()第一个参数的值，\n//例如，f.bind(obj)，实际上可以理解为obj.f()，这时，f函数体内的this自然指向的是obj\n//IngredientAdded是buildControls定义的\n\nconst controls = [{\n  label: 'Salad',\n  type: 'salad'\n}, {\n  label: 'Bacon',\n  type: 'bacon'\n}, {\n  label: 'Cheese',\n  type: 'cheese'\n}, {\n  label: 'Meat',\n  type: 'meat'\n}];\n\nconst buildControls = props => React.createElement(\"div\", {\n  className: classes.BuildControls,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, \"Current Price: \", React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, \"\\xA3\", props.totalPrice.toFixed(2)), \" \"), controls.map(control => {\n  return React.createElement(BuildControl, {\n    key: control.label,\n    label: control.label,\n    add: props.IngredientAdded.bind(this, control.type),\n    remove: props.RemoveIngredient.bind(this, control.type),\n    disabled: props.disabled[control.type],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  });\n}), React.createElement(\"button\", {\n  onClick: props.click,\n  className: classes.OrderButton,\n  disabled: !props.purchaseable,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, \"ORDER NOW\"));\n\nexport default buildControls;","map":{"version":3,"sources":["C:/demo/hunburger/src/Components/Burger/OrderSummary/BuildControls.js"],"names":["React","Component","classes","BuildControl","controls","label","type","buildControls","props","BuildControls","totalPrice","toFixed","map","control","IngredientAdded","bind","RemoveIngredient","disabled","click","OrderButton","purchaseable"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,YAAP,MAAyB,+BAAzB,C,CAEM;AACA;AACG;AACA;AACA;AACD;;AAGR,MAAMC,QAAQ,GAAG,CACf;AAACC,EAAAA,KAAK,EAAG,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CADe,EAEf;AAACD,EAAAA,KAAK,EAAG,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CAFe,EAGf;AAACD,EAAAA,KAAK,EAAG,QAAT;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAHe,EAIf;AAACD,EAAAA,KAAK,EAAG,MAAT;AAAiBC,EAAAA,IAAI,EAAE;AAAvB,CAJe,CAAjB;;AAMA,MAAMC,aAAa,GAAIC,KAAD,IAEpB;AAAK,EAAA,SAAS,EAAEN,OAAO,CAACO,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAUD,KAAK,CAACE,UAAN,CAAiBC,OAAjB,CAAyB,CAAzB,CAAV,CAAlB,MAFJ,EAGKP,QAAQ,CAACQ,GAAT,CAAaC,OAAO,IAAI;AACrB,SAAO,oBAAC,YAAD;AACN,IAAA,GAAG,EAAEA,OAAO,CAACR,KADP;AAEN,IAAA,KAAK,EAAEQ,OAAO,CAACR,KAFT;AAGN,IAAA,GAAG,EAAEG,KAAK,CAACM,eAAN,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiCF,OAAO,CAACP,IAAzC,CAHC;AAIN,IAAA,MAAM,EAAEE,KAAK,CAACQ,gBAAN,CAAuBD,IAAvB,CAA4B,IAA5B,EAAiCF,OAAO,CAACP,IAAzC,CAJF;AAKN,IAAA,QAAQ,EAAEE,KAAK,CAACS,QAAN,CAAeJ,OAAO,CAACP,IAAvB,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAOH,CARA,CAHL,EAYI;AAAQ,EAAA,OAAO,EAAEE,KAAK,CAACU,KAAvB;AACA,EAAA,SAAS,EAAEhB,OAAO,CAACiB,WADnB;AAEC,EAAA,QAAQ,EAAE,CAACX,KAAK,CAACY,YAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAZJ,CAFF;;AAsBA,eAAeb,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport classes from './BuildControls.module.css'\nimport BuildControl from '../BuildControls/BuildControl';\n\n      //Array.map() 方法返回一个新数组，\n      //数组中的元素为原始数组元素调用函数处理后的值，同时不会改变原来的数组。\n         //bind()方法主要就是将函数绑定到某个对象，bind()会创建一个函数，\n         //函数体内的this对象的值会被绑定到传入bind()第一个参数的值，\n         //例如，f.bind(obj)，实际上可以理解为obj.f()，这时，f函数体内的this自然指向的是obj\n        //IngredientAdded是buildControls定义的\n\n\nconst controls = [\n  {label : 'Salad', type: 'salad'},\n  {label : 'Bacon', type: 'bacon'},\n  {label : 'Cheese', type: 'cheese'},\n  {label : 'Meat', type: 'meat'},\n]\nconst buildControls = (props) => (\n\n  <div className={classes.BuildControls}>\n    \n      <p>Current Price: <strong>£{props.totalPrice.toFixed(2)}</strong> </p>\n      {controls.map(control => {\n          return <BuildControl\n           key={control.label} \n           label={control.label} \n           add={props.IngredientAdded.bind(this, control.type)}\n           remove={props.RemoveIngredient.bind(this,control.type)}\n           disabled={props.disabled[control.type]}\n           />\n      })}\n      <button onClick={props.click}\n      className={classes.OrderButton}\n       disabled={!props.purchaseable}>ORDER NOW</button>\n       \n  </div>\n)\n\n\nexport default buildControls;"]},"metadata":{},"sourceType":"module"}